variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/"
  MAJOR_VERSION: 0
  MINOR_VERSION: 0
  PACKAGE_NAME: bond-agent
  PACKAGE_VERSION: ${MAJOR_VERSION}.${MINOR_VERSION}.${CI_PIPELINE_ID}
  
  # This is a magic request parameter to get the file attribute of the package, 
  # See: https://docs.gitlab.com/ee/user/packages/generic_packages/index.html#publish-a-package-file
  GET_FILE_ATTR_MAGIC: "select=package_file" 

stages:
  - stop-old-ci
  - static-analysis
  - test
  - pre-build
  - build
  - generate_release_tag
  - upload
  - release

stop-old-ci:
  image: gitlab.teamt5.net:5000/rd/docker/ubuntu-20.04:python3
  stage: stop-old-ci
  script:
  - python ci/gitlab_ops.py

static-analysis:
  image: python:3.8
  stage: static-analysis
  script:
    - pip install poetry
    - poetry install --with test
    - poetry run black .
    - git diff --exit-code --color

test:
  image: python:3.8
  stage: test
  script:
    - pip install poetry
    - poetry install --with test
    - poetry run pytest

# Pre-build stage
.pre-build:
  stage: pre-build
  script:
    - echo "Preparing build..."
  only:
    - main
    - release
  timeout: 10 minutes

pre_build_windows_32:
  extends: .pre-build
  script:
    - powershell -File ci/pack/windows/setup_green.ps1 x86
  artifacts:
    paths:
      - requirements-win32.txt
    expire_in: 1 day
  tags: [Scanner_Worker_win10_x86_cht]

pre_build_windows_64:
  extends: .pre-build
  script:
    - powershell -File ci/pack/windows/setup_green.ps1 x64
  artifacts:
    paths:
      - requirements-win64.txt
    expire_in: 1 day
  tags: [SonarScanTest-Win10_64bit_cht]

# pre_build_linux:
#   extends: .pre-build
#   stage: build
#   script:
#     - bash ci/pack/linux/setup.sh
#     - bash ci/pack/linux/gen_requirements.sh
#   artifacts:
#     paths:
#       - requirements.txt
#     expire_in: 1 day
#   tags: [shell]

# pre_build_macos:
#   extends: .pre-build
#   stage: build
#   script:
#     - bash ci/pack/macos/setup.sh
#     - bash ci/pack/macos/gen_requirements.sh
#   artifacts:
#     paths:
#       - requirements.txt
#     expire_in: 1 day
#   tags: [macOS_12.0]

# Build stages for Windows
build_windows_32:
  stage: build
  script:
    - powershell -File ci/pack/windows/build_zip.ps1 x86
  dependencies:
    - pre_build_windows_32
  artifacts:
    paths:
      - bond_agent_windows_x86.zip
    expire_in: 1 day
  tags: [Scanner_Worker_win10_x86_cht]
  only:
    - main
    - release
  timeout: 15 minutes

build_windows_64:
  stage: build
  script:
    - powershell -File ci/pack/windows/build_zip.ps1 x64
  dependencies:
    - pre_build_windows_64
  artifacts:
    paths:
      - bond_agent_windows_x64.zip
    expire_in: 1 day
  tags: [SonarScanTest-Win10_64bit_cht]
  only:
    - main
    - release
  timeout: 15 minutes

# # Build stages for Linux
# build_linux_32:
#   stage: build
#   script:
#     - bash ci/pack/linux/build_zip.sh 32
#   dependencies:
#     - pre_build_linux
#   artifacts:
#     paths:
#       - bond_agent_32.zip
#     expire_in: 1 day
#  tags: [shell]

# build_linux_64:
#   stage: build
#   script:
#     - bash ci/pack/linux/build_zip.sh 64
#   dependencies:
#     - pre_build_linux
#   artifacts:
#     paths:
#       - bond_agent_64.zip
#     expire_in: 1 day
#   tags: [shell]

# # Build stages for macOS
# build_macos_64:
#   stage: build
#   script:
#     - bash ci/pack/macos/build_zip.sh 64
#   dependencies:
#     - pre_build_macos
#   artifacts:
#     paths:
#       - bond_agent_64.zip
#     expire_in: 1 day
#   tags: [macOS_12.0]

# build_macos_32:
#   stage: build
#   script:
#     - bash ci/pack/macos/build_zip.sh 32
#   dependencies:
#     - pre_build_macos
#   artifacts:
#     paths:
#       - bond_agent_32.zip
#     expire_in: 1 day
#   tags: [macOS_12.0]

# Generate a release tag when the release branch changes
generate_release_tag:
  stage: generate_release_tag
  image: gitlab.teamt5.net:5000/rd/docker/ubuntu-22.04:base
  script:
    - |
      echo "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}"
      echo "CI_COMMIT_TAG=${CI_COMMIT_TAG}"
      echo "CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
      echo "CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}"
      echo "CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG}"
      echo "CI_COMMIT_REF_PROTECTED=${CI_COMMIT_REF_PROTECTED}"

      if [[ -z "${CI_COMMIT_TAG}" ]]; then
        if [[ "${CI_COMMIT_BRANCH}" == "release" ]]; then
          echo "No release tag found, generating one..."
          export CI_COMMIT_TAG="${MAJOR_VERSION}.${MINOR_VERSION}-stable"
        elif [[ "${CI_COMMIT_BRANCH}" == "main" ]]; then
          echo "No tag found for the main branch, generating one..."
          export CI_COMMIT_TAG="v${MAJOR_VERSION}.${MINOR_VERSION}.${CI_COMMIT_SHORT_SHA}"
        fi
        echo "CI_COMMIT_TAG=${CI_COMMIT_TAG}"
      fi
    - | 
      export LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y%m%d)
    - |
      git config --global user.email "ci@teamt5.org"
      git config --global user.name "CI Bot"
      git remote set-url origin "https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}"
      git tag -a "${LAST_COMMIT_DATE}-${CI_COMMIT_TAG}" -m "Release tag ${CI_COMMIT_TAG}"
      git push origin "${LAST_COMMIT_DATE}-${CI_COMMIT_TAG}"
    - |
      echo "${LAST_COMMIT_DATE}-${CI_COMMIT_TAG}" > ci_release_tag.txt
  only:
    - main
    - release
  artifacts:
    paths:
      - ci_release_tag.txt
    expire_in: 1 hour
  timeout: 3 minutes


#  Depend on the generated release tag to upload the release
upload:
  stage: upload
  image: gitlab.teamt5.net:5000/rd/docker/ubuntu-22.04:base
  script:
    - |
      curl \
      --header "JOB-TOKEN: $CI_JOB_TOKEN" \
      --upload-file bond_agent_windows_x86.zip \
      "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}/${PACKAGE_VERSION}/bond_agent_windows_x86.zip?${GET_FILE_ATTR_MAGIC}" >> result.txt
    
    - |
      curl \
      --header "JOB-TOKEN: $CI_JOB_TOKEN" \
      --upload-file bond_agent_windows_x64.zip \
      "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}/${PACKAGE_VERSION}/bond_agent_windows_x64.zip?${GET_FILE_ATTR_MAGIC}" >> result.txt
    
  dependencies:
    - generate_release_tag
    - build_windows_32
    - build_windows_64
  only:
    - main
    - release
  artifacts:
    paths:
      - result.txt
    expire_in: 1 hour
  timeout: 3 minutes

generate_change_log:
  stage: release
  image: gitlab.teamt5.net:5000/rd/docker/ubuntu-22.04:base
  before_script:
    - apt-get update -y && apt-get install jq -y
  script:
    - echo "Generating change log..."
    - cat result.txt
    - |
      cat result.txt | \
      jq -r '.file.url' | \
      while read -r url; do \
        file_id=$(echo "$url" | sed -n 's/.*\/files\/\([0-9]\+\)\/.*/\1/p'); \
        if [[ $url == *"bond_agent_windows_x86"* ]]; then \
          echo "- [🖥️ Windows x86](/../../package_files/${file_id}/download)"; \
        elif [[ $url == *"bond_agent_windows_x64"* ]]; then \
          echo "- [🖥️ Windows x64](/../../package_files/${file_id}/download)"; \
        elif [[ $url == *"bond_agent_Linux_32"* ]]; then \
          echo "- [🐧 Linux 32-bit](/../../package_files/${file_id}/download)"; \
        elif [[ $url == *"bond_agent_Linux_64"* ]]; then \
          echo "- [🐧 Linux 64-bit](/../../package_files/${file_id}/download)"; \
        elif [[ $url == *"bond_agent_MacOS_32"* ]]; then \
          echo "- [🍎 macOS 32-bit](/../../package_files/${file_id}/download)"; \
        elif [[ $url == *"bond_agent_MacOS_64"* ]]; then \
          echo "- [🍎 macOS 64-bit](/../../package_files/${file_id}/download)"; \
        else echo ""; \
        fi; \
      done > summary_link.txt
  artifacts:
    paths:
      - summary_link.txt
    expire_in: 1 day
  dependencies:
    - upload
  only:
    - main
    - release
  timeout: 5 minutes

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - |
      export TAG_NAME="$(cat ci_release_tag.txt)"
      echo "TAG_NAME=${TAG_NAME}"
    - |
      release-cli create --name "Bond Agent" \
      --ref "${CI_COMMIT_REF_NAME}" \
      --tag-name "${TAG_NAME}" \
      --description summary_link.txt
  dependencies:
    - upload
    - generate_release_tag
    - generate_change_log
  needs:
    - job: upload
      artifacts: true
    - job: generate_release_tag
      artifacts: true
    - job: generate_change_log
      artifacts: true
  only:
    - main
    - release
  timeout: 3 minutes
