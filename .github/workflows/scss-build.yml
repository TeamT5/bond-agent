name: Build and Release

on:
  push:
    branches:
      - "use_scss"
      - "main"
      - "release"
  pull_request:
    branches:
      - "use_scss"
      - "main"
      - "release"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Format code with black
        run: |
          black --check .

      - name: Test with pytest
        run: |
          pytest

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install Node.js dependencies
        run: npm install -g sass

      - name: Compile SCSS to CSS
        run: |
          mkdir -p static/css
          sass static/scss/index.scss static/css/index.css
          sass static/scss/exception_error.scss static/css/exception_error.css

      - name: Get project name and version
        id: get_project_info
        run: |
          NAME=$(grep '^name' pyproject.toml | sed -E 's/name = "(.*)"/\1/')
          VERSION=$(grep '__version__' libs/config/__version__.py | sed -E 's/__version__ = "(.*)"/\1/')
          echo "NAME=$NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=${NAME}-${VERSION}" >> $GITHUB_ENV

      - name: Set permissions and package project files as zip
        run: |
          ARTIFACTS_DIR=$(pwd)/artifacts
          mkdir -p $ARTIFACTS_DIR
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          zip -r $ARTIFACTS_DIR/${{ env.NAME }}_${{ env.VERSION }}.zip ./*

      - name: Set permissions and package project files as tar.gz
        run: |
          ARTIFACTS_DIR=$(pwd)/artifacts
          mkdir -p $ARTIFACTS_DIR
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          tar -czvf $ARTIFACTS_DIR/${{ env.NAME }}_${{ env.VERSION }}.tar.gz ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-package
          path: ${{ github.workspace }}/artifacts

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: release-package
          path: release/

      - name: Get version from __version__.py
        id: get_version
        run: |
          VERSION=$(grep '__version__' libs/config/__version__.py | sed -E 's/__version__ = "(.*)"/\1/')
          NAME=$(grep '^name' pyproject.toml | sed -E 's/name = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "NAME=$NAME" >> $GITHUB_ENV
          echo "TAG_NAME=${NAME}-${VERSION}" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global user.name 'github-actions[bot]'

      - name: Create release tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset - ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/artifacts/${{ env.NAME }}_${{ env.VERSION }}.zip
          asset_name: ${{ env.NAME }}_${{ env.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TAR.GZ
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/artifacts/${{ env.NAME }}_${{ env.VERSION }}.tar.gz
          asset_name: ${{ env.NAME }}_${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
