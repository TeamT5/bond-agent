name: Build and Release

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.11]
        os: [ubuntu-latest, windows-latest]

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pytest poetry
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          poetry install

      - name: Format code with black
        run: |
          black --check .

      - name: Test with pytest
        run: |
          pytest

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install Node.js dependencies
        run: npm install -g sass

      - name: Compile SCSS to CSS
        run: |
          mkdir -p static/css
          sass static/scss/index.scss static/css/index.css
          sass static/scss/exception_error.scss static/css/exception_error.css

      - name: Get version from __version__.py
        id: get_version
        run: |
          VERSION=$(grep '__version__' libs/config/__version__.py | sed -E 's/__version__ = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Package project files as zip
        run: |
          zip -r ${{ env.PROJECT_NAME }}_${{ env.VERSION }}.zip ./*

      - name: Package project files as tar.gz
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.VERSION }}.tar.gz ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            ${{ env.PROJECT_NAME }}_${{ env.VERSION }}.zip
            ${{ env.PROJECT_NAME }}_${{ env.VERSION }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Tag
        run: |
          git config --local user.email "ci@scc-net.tw"
          git config --local user.name "CI"
          VERSION=$(grep '__version__' libs/config/__version__.py | sed -E 's/__version__ = "(.*)"/\1/')
          TAG_NAME="v${VERSION}-${{ github.run_number }}-${{ github.sha }}"
          echo $TAG_NAME > tag_name.txt
          git tag $TAG_NAME
          git push origin --tags
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_TOKEN2 }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: release/

      - name: Generate release environment variables
        run: |
          ./ci/release_note_generator.sh > release_note.md
          echo "TAG_NAME=$(cat tag_name.txt)" >> $GITHUB_ENV
          echo "RELEASE_NOTE=$(cat release_note.md)" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release $(cat tag_name.txt)" >> $GITHUB_ENV

      - uses: ncipollo/release-action@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag: ${{ env.TAG_NAME }}
          body: ${{ env.RELEASE_NOTE }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false
          artifacts: "release/*/cg-*.*"
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN2 }}
