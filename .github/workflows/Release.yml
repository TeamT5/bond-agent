name: Build and Release

on:
  push:
    branches:
      - "use_scss"
      - "main"
      - "release"
  pull_request:
    branches:
      - "use_scss"
      - "main"
      - "release"

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Cache Python packages
        id: cache-python
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Format code with black
        run: |
          black --check .

      - name: Test with pytest
        run: |
          pytest

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install Node.js dependencies
        run: npm install -g sass

      - name: Get project name, version and timestamp
        id: get_project_info
        run: |
          NAME=$(grep '^name' pyproject.toml | sed -E 's/name = "(.*)"/\1/' | tr -d '[:space:]')
          VERSION=$(grep '__version__' __version__.py | sed -E 's/__version__ = "(.*)"/\1/' | tr -d '[:space:]')
          TIMESTAMP=$(TZ=Asia/Taipei date +'%Y%m%d%H%M%S')
          echo "{\"name\":\"${NAME}\",\"version\":\"${VERSION}\",\"timestamp\":\"${TIMESTAMP}\"}" > release_info.json
          echo "NAME=${NAME}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "TAG_NAME=${NAME}-${VERSION}-${TIMESTAMP}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${NAME}_${VERSION}_${TIMESTAMP}" >> $GITHUB_ENV

      - name: Compile SCSS to CSS
        run: |
          mkdir -p static/css
          sass static/scss/index.scss static/css/index.css
          sass static/scss/exception_error.scss static/css/exception_error.css

      - name: Set permissions and package project files as zip
        run: |
          mkdir -p artifacts
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          zip -r artifacts/${{ env.PACKAGE_NAME }}.zip . \
            -x "__pycache__/*" -x "*/__pycache__/*" \
            -x "Downloads/*" -x "logs/*" -x ".pytest_cache/*" -x "static/scss/*" \
            -x "static/*.map" \
            -x "release_info.json" -x "file.txt" \
            -x "artifacts/*" -x ".git/*" -x ".github/*" -x "tests/*" -x ".gitignore"

      - name: Set permissions and package project files as tar.gz
        run: |
          mkdir -p artifacts
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          tar --exclude='./__pycache__' --exclude='./*/__pycache__' \
            --exclude='./Downloads' --exclude='./logs' --exclude='./.pytest_cache' --exclude='./static/scss' \
            --exclude='./static/*.map' \
            --exclude='./release_info.json' --exclude='./file.txt' \
            --exclude='./artifacts' --exclude='./.git' --exclude='./.github' --exclude='./tests' --exclude='./.gitignore' \
            -czvf artifacts/${{ env.PACKAGE_NAME }}.tar.gz .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-package
          path: artifacts/

      - name: Configure Git
        run: |
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global user.name 'github-actions[bot]'

      - name: Create release tag
        run: |
          TAG_NAME=$(jq -r '.name + "-" + .version + "-" + .timestamp' release_info.json)
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Generate release notes
        id: generate_release_notes
        run: |
          echo "## Changes in this release" > release_notes.md
          echo "" >> release_notes.md
          git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $TAG_NAME
          release_name: Release $TAG_NAME
          body_path: ./release_notes.md
          draft: false
          prerelease: false

      - name: Upload Release Asset - ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGE_NAME }}.zip
          asset_name: ${{ env.PACKAGE_NAME }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TAR.GZ
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGE_NAME }}.tar.gz
          asset_name: ${{ env.PACKAGE_NAME }}.tar.gz
          asset_content_type: application/gzip
