name: Build

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Restore Python packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install Node.js dependencies
        run: npm install -g sass

      - name: Get project name, version and timestamp
        id: get_project_info
        run: |
          NAME=$(grep '^name' pyproject.toml | sed -E 's/name = "(.*)"/\1/' | tr -d '[:space:]')
          VERSION=$(grep '__version__' libs/config/__version__.py | sed -E 's/__version__ = "(.*)"/\1/' | tr -d '[:space:]')
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "NAME=$NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "TAG_NAME=${NAME}-${VERSION}-${TIMESTAMP}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${NAME}_${VERSION}_${TIMESTAMP}" >> $GITHUB_ENV

      - name: Compile SCSS to CSS
        run: |
          mkdir -p static/css
          sass static/scss/index.scss static/css/index.css
          sass static/scss/exception_error.scss static/css/exception_error.css

      - name: Set permissions and package project files as zip
        run: |
          mkdir -p artifacts
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          zip -r artifacts/${{ env.PACKAGE_NAME }}.zip . -x "node_modules/*" -x "artifacts/*" -x ".git/*" -x ".github/*" -x "tests/*" -x ".gitignore"

      - name: Set permissions and package project files as tar.gz
        run: |
          mkdir -p artifacts
          find . -type f -iname "*.sh" -exec chmod +x {} \;
          tar --exclude='./node_modules' --exclude='./artifacts' --exclude='./.git' --exclude='./.github' --exclude='./tests' --exclude='./.gitignore' -czvf artifacts/${{ env.PACKAGE_NAME }}.tar.gz .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-package
          path: artifacts/
